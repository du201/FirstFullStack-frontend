{"version":3,"sources":["App.js","serviceWorker.js","i18next.js","index.js","logo.svg"],"names":["apiEndpoint","process","withTranslation","useState","email","setEmail","name","setName","active","setActive","handlePost","a","axios","post","data","console","log","handleGet","get","posts","Fragment","className","onClick","onChange","event","target","value","style","width","type","Boolean","window","location","hostname","match","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"oSAcMA,EAAcC,yDAkDLC,iBAjDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGYJ,oBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,KAWVC,EAAU,uCAAG,8BAAAC,EAAA,sEACYC,IAAMC,KAAKb,EAAa,CAAEI,MAAOA,EAAOE,KAAMA,EAAME,OAAQA,IADxE,gBACHK,EADG,EACTC,KACRC,QAAQC,IAAIH,GAFK,2CAAH,qDAKVI,EAAS,uCAAG,8BAAAN,EAAA,sEAIcC,IAAMM,IAAIlB,GAJxB,gBAIFmB,EAJE,EAIRL,KACRC,QAAQC,IAAIG,GALI,2CAAH,qDASf,OACE,kBAAC,IAAMC,SAAP,KACE,4BAAQC,UAAU,kBAAkBC,QAASZ,GAA7C,QACA,6BAFF,QAIE,2BAAOa,SAAU,SAACC,GAAYnB,EAASmB,EAAMC,OAAOC,QAAUA,MAAOtB,EAAOiB,UAAU,8BAA8BM,MAAO,CAAEC,MAAO,SAJtI,OAME,2BAAOL,SAAU,SAACC,GAAYjB,EAAQiB,EAAMC,OAAOC,QAAUA,MAAOpB,EAAMe,UAAU,8BAA8BM,MAAO,CAAEC,MAAO,SANpI,SAQE,2BAAOC,KAAK,WAAWN,SAAU,WAAQd,GAAWD,IAAWkB,MAAOlB,IACtE,6BACA,4BAAQa,UAAU,mBAAlB,OAEA,6BACA,4BAAQA,UAAU,mBAAlB,UAEA,6BACA,4BAAQA,UAAU,kBAAkBC,QAASL,GAA7C,OACA,iCC9Cca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCRNC,IAGGC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EACPC,UAhBc,CAAC,KAAM,OAiBrBC,cAAe,CACbC,aAAa,KAKJV,EAAf,ECxBApB,QAAQC,IAAIf,qLAEZ6C,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAW,yCACnB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a,6EGzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.120ba45e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport Haha from './Haha';\nimport Loader from 'react-loader-spinner';\nimport RangeSlider from 'react-dual-rangeslider';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore from 'swiper';\nimport 'swiper/swiper-bundle.css';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from \"axios\";\n\nconst apiEndpoint = process.env.REACT_APP_API_URL + \"customers/\";\nconst App = () => {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [active, setActive] = useState(false);\n\n  const sendHttpRequest = (method, url, data) => {\n    return fetch(url).then(response => {\n      return response.json();\n    })\n  };\n\n  const handlePost = async () => {\n    const { data: post } = await axios.post(apiEndpoint, { email: email, name: name, active: active });\n    console.log(post);\n  };\n\n  const handleGet = async () => {\n    // sendHttpRequest('GET', apiEndpoint).then(responseData => {\n    //   console.log(responseData);\n    // });\n    const { data: posts } = await axios.get(apiEndpoint);\n    console.log(posts);\n  };\n\n\n  return (\n    <React.Fragment>\n      <button className=\"btn btn-primary\" onClick={handlePost}>POST</button>\n      <br />\n      Email\n      <input onChange={(event) => { setEmail(event.target.value) }} value={email} className=\"form-control d-inline-block\" style={{ width: \"42%\" }} />\n      Name\n      <input onChange={(event) => { setName(event.target.value) }} value={name} className=\"form-control d-inline-block\" style={{ width: \"42%\" }} />\n      Active\n      <input type=\"checkbox\" onChange={() => { setActive(!active) }} value={active} />\n      <br />\n      <button className=\"btn btn-primary\">PUT</button>\n\n      <br />\n      <button className=\"btn btn-primary\">DELETE</button>\n\n      <br />\n      <button className=\"btn btn-primary\" onClick={handleGet}>GET</button>\n      <br />\n    </React.Fragment>\n  );\n\n}\n\nexport default withTranslation()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// don't want to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\nconst Languages = ['en', \"chi\"];\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    whitelist: Languages,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './i18next.js';\n\nconsole.log(process.env);\n\nReactDOM.render(\n  <Suspense fallback={(<div>Loading</div>)}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}